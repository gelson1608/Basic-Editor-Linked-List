/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newpackage;

import java.awt.Color;
import java.awt.Font;
import javax.swing.JOptionPane;

/**
 *
 * @author AlssiadPC
 */
public class Display extends javax.swing.JFrame {

    private Nodo Nodito;
    private Nodo Current;
    private Nodo lista;
    private Nodo Head;
    private Object Tail;

    /**
     * Creates new form Display
     */
    public Display() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BotonAdelante = new javax.swing.JButton();
        BotonAtras = new javax.swing.JButton();
        Titulo = new javax.swing.JLabel();
        CajaTexto = new javax.swing.JTextField();
        Texto1 = new javax.swing.JLabel();
        ListaCambios = new javax.swing.JComboBox<>();
        TextoColor = new javax.swing.JLabel();
        BotonEjecutar = new javax.swing.JButton();
        BotonImprimir = new javax.swing.JButton();
        BotonLimpiar = new javax.swing.JButton();
        BotonCapturar = new javax.swing.JButton();
        CajaTexto2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BotonAdelante.setText("Ctrl + Y");
        BotonAdelante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAdelanteActionPerformed(evt);
            }
        });

        BotonAtras.setText("Ctrl + Z");
        BotonAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAtrasActionPerformed(evt);
            }
        });

        Titulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Titulo.setText("The Ultimate Text Editor");

        CajaTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CajaTextoActionPerformed(evt);
            }
        });

        Texto1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Texto1.setText("Introduce your text:");

        ListaCambios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Red", "Blue", "Green", "Black", "Yellow", "Bold", "Italics" }));

        TextoColor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        TextoColor.setText("Posible changes:");

        BotonEjecutar.setText("Run");
        BotonEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEjecutarActionPerformed(evt);
            }
        });

        BotonImprimir.setText("Print Result");
        BotonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonImprimirActionPerformed(evt);
            }
        });

        BotonLimpiar.setText("Clear");
        BotonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonLimpiarActionPerformed(evt);
            }
        });

        BotonCapturar.setText("Catch string");
        BotonCapturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCapturarActionPerformed(evt);
            }
        });

        CajaTexto2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CajaTexto2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TextoColor)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(CajaTexto2)
                            .addComponent(BotonImprimir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Texto1)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(Titulo)
                                        .addComponent(CajaTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(ListaCambios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(BotonEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(BotonAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(BotonCapturar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(BotonLimpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(BotonAdelante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Texto1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BotonLimpiar)
                        .addGap(5, 5, 5)
                        .addComponent(BotonCapturar))
                    .addComponent(CajaTexto))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(TextoColor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ListaCambios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BotonEjecutar)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BotonAtras)
                            .addComponent(BotonAdelante))))
                .addGap(18, 18, 18)
                .addComponent(BotonImprimir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CajaTexto2, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void agregarFrente(Object n, String color, Boolean italics, Boolean bold){
        Nodo temp=new Nodo(n, color, italics, bold);
        if (lista==null){
            lista=temp;                 //Se crea un nodo con la informacion dada
        }                               //y se aloja como continuacion de Actual(Actual)
        else{
            Current.post=temp;
        }
    }
    
    public void SetearCaja2(String color, Boolean italics, Boolean bold){
        if(color!=null){
            if(color.equalsIgnoreCase("red")){
                CajaTexto2.setForeground(Color.red);
            }
            else if(color.equalsIgnoreCase("blue")){
                CajaTexto2.setForeground(Color.blue);
            }
            else if(color.equalsIgnoreCase("green")){
                CajaTexto2.setForeground(Color.green);
            }
            else if(color.equalsIgnoreCase("yellow")){
                CajaTexto2.setForeground(Color.yellow);
            }
            else if(color.equalsIgnoreCase("black")){
                CajaTexto2.setForeground(Color.black);
            }
        }
        
        if(italics!=null){
            if(italics==true){
                CajaTexto2.setFont(CajaTexto2.getFont().deriveFont(Font.ITALIC));
            }
            else{
                CajaTexto2.setFont(CajaTexto2.getFont().deriveFont(Font.PLAIN));
            }
        }
        
        if(bold!=null){
            if(bold==true){
                CajaTexto2.setFont(CajaTexto2.getFont().deriveFont(Font.BOLD));
            }
            else{
                CajaTexto2.setFont(CajaTexto2.getFont().deriveFont(Font.PLAIN));
            }
        }
    }
    
    private void BotonAdelanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAdelanteActionPerformed
        // TODO add your handling code here:
        if(Current.post==null){
            JOptionPane.showMessageDialog(null, "Error: No hay cambio a repetir");
        }
        else{
            
            Current=Current.post;           //Si no hay cambio adelante manda un mensaje
            Tail=Current.post;              //caso contrario Actual se adelanta,
            Head=Current.pre;               //Pre y post se extiende del nuevo actual
            
        }
    }//GEN-LAST:event_BotonAdelanteActionPerformed

    private void BotonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonLimpiarActionPerformed
        // TODO add your handling code here:
        CajaTexto.setText("");              //Elimina cualquier escrito en la caja de texto
        CajaTexto2.setText("");
        Current=null;
        SetearCaja2("black", false, false);
    }//GEN-LAST:event_BotonLimpiarActionPerformed

    private void BotonCapturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCapturarActionPerformed
        // TODO add your handling code here:
        String x = CajaTexto.getText();     //Agrega la cadena de CajaTexto a una variable
        String color = "black";
        Boolean italics=false;
        Boolean bold=false;
        Current = new Nodo(x, color, italics, bold);              //Se crea un nodo con nuestra variable
        lista=Current;                      //La lista tiene ahora un elemento
    }//GEN-LAST:event_BotonCapturarActionPerformed

    private void BotonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonImprimirActionPerformed
        // TODO add your handling code here:
        SetearCaja2(Current.Color, Current.Ita, Current.Bold);
        CajaTexto2.setText((String) Current.e);
    }//GEN-LAST:event_BotonImprimirActionPerformed

    private void BotonEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEjecutarActionPerformed
        // TODO add your handling code here:
        if(ListaCambios.getSelectedItem().equals("Red")){
            Object y = Current.e;                      //Dependiendo del item seleccionado en el ComboBox
            String color = "red";
            Boolean italics = Current.Ita;
            Boolean bold= Current.Bold;
            agregarFrente(y, color, italics, bold);             //El programa realizara las mismas acciones con 
            Head=Current;                                       //Variaciones de fuente unicamente
            Current=Current.post;                               //Se crea una variable con la informacion del Actual
            Current.pre=Head;                                   //mas los cambios a realizar y se llama agregarFrente
        }                                                       //Actual se mueve y ahora se dispone de un cambio hecho
        else if(ListaCambios.getSelectedItem().equals("Blue")){
            Object y = Current.e;                      //Dependiendo del item seleccionado en el ComboBox
            String color = "blue";
            Boolean italics = Current.Ita;
            Boolean bold= Current.Bold;
            agregarFrente(y, color, italics, bold);
            Head=Current;
            Current=Current.post;
            Current.pre=Head;
        }
        else if(ListaCambios.getSelectedItem().equals("Green")){
            Object y = Current.e;                      //Dependiendo del item seleccionado en el ComboBox
            String color = "green";
            Boolean italics = Current.Ita;
            Boolean bold= Current.Bold;
            agregarFrente(y, color, italics, bold);
            Head=Current;
            Current=Current.post;
            Current.pre=Head;
        }
        else if(ListaCambios.getSelectedItem().equals("Black")){
            Object y = Current.e;                      //Dependiendo del item seleccionado en el ComboBox
            String color = "black";
            Boolean italics = Current.Ita;
            Boolean bold= Current.Bold;
            agregarFrente(y, color, italics, bold);
            Head=Current;
            Current=Current.post;
            Current.pre=Head;
        }
        else if(ListaCambios.getSelectedItem().equals("Yellow")){
            Object y = Current.e;                      //Dependiendo del item seleccionado en el ComboBox
            String color = "yellow";
            Boolean italics = Current.Ita;
            Boolean bold= Current.Bold;
            agregarFrente(y, color, italics, bold);
            Head=Current;
            Current=Current.post;
            Current.pre=Head;
        }
        else if(ListaCambios.getSelectedItem().equals("Bold")){
            Object y = Current.e;                      //Dependiendo del item seleccionado en el ComboBox
            String color = Current.Color;
            Boolean italics = Current.Ita;
            Boolean bold= true;
            agregarFrente(y, color, italics, bold);
            Head=Current;
            Current=Current.post;
            Current.pre=Head;
        }
        else if(ListaCambios.getSelectedItem().equals("Italics")){
            Object y = Current.e;                      //Dependiendo del item seleccionado en el ComboBox
            String color = Current.Color;
            Boolean italics= true;
            Boolean bold= Current.Bold;
            agregarFrente(y, color, italics, bold);
            Head=Current;
            Current=Current.post;
            Current.pre=Head;
        }
    }//GEN-LAST:event_BotonEjecutarActionPerformed

    private void BotonAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAtrasActionPerformed
        // TODO add your handling code here:
        if(Current.pre==null){
            JOptionPane.showMessageDialog(rootPane, "Error: No hay cambio que deshacer");
        }
        else{
            Current=Current.pre;            //Si no se ha realizado algun cambio se imprime un mensaje
            Tail=Current.post;              //caso contrario Actual se mueve una posicion atras 
            if(Current.pre!=null){          //Tail se extiende de actual
                Head=Current.pre;           //Sin embargo Head(previo) solo se extiende de current si
            }                               //este existe (!=null)
        }
    }//GEN-LAST:event_BotonAtrasActionPerformed

    private void CajaTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CajaTextoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CajaTextoActionPerformed

    private void CajaTexto2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CajaTexto2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CajaTexto2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Display().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonAdelante;
    private javax.swing.JButton BotonAtras;
    private javax.swing.JButton BotonCapturar;
    private javax.swing.JButton BotonEjecutar;
    private javax.swing.JButton BotonImprimir;
    private javax.swing.JButton BotonLimpiar;
    private javax.swing.JTextField CajaTexto;
    private javax.swing.JTextField CajaTexto2;
    private javax.swing.JComboBox<String> ListaCambios;
    private javax.swing.JLabel Texto1;
    private javax.swing.JLabel TextoColor;
    private javax.swing.JLabel Titulo;
    // End of variables declaration//GEN-END:variables

    
}
